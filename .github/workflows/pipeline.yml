name: CI/CD Pipeline

on: [push]

env:
  DB_NAME: oumaima
  DB_HOST: 127.0.0.1
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  SPRING_PROFILES_ACTIVE: pipeline
  SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/oumaima?useSSL=false&allowPublicKeyRetrieval=true
  SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
  SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword123
          MYSQL_DATABASE: oumaima
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -uroot -prootpassword123"
          --health-interval=5s
          --health-timeout=10s
          --health-retries=10

    steps:
      - uses: actions/checkout@v4

      - name: Navigate to project folder and set PROJECT_DIR
        run: |
          cd springboot-swagger-crud
          echo "PROJECT_DIR=$(pwd)" >> $GITHUB_ENV
          ls -la

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Configure MySQL user and permissions
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h127.0.0.1 -uroot -prootpassword123 --silent; then
              mysql -h127.0.0.1 -uroot -prootpassword123 -e "
                CREATE DATABASE IF NOT EXISTS ${DB_NAME} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
                DROP USER IF EXISTS '${DB_USER}'@'%';
                CREATE USER '${DB_USER}'@'%' IDENTIFIED BY '${DB_PASSWORD}';
                GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'%';
                GRANT PROCESS, RELOAD, REPLICATION CLIENT ON *.* TO '${DB_USER}'@'%';
                GRANT CREATE TEMPORARY TABLES ON ${DB_NAME}.* TO '${DB_USER}'@'%';
                GRANT LOCK TABLES ON ${DB_NAME}.* TO '${DB_USER}'@'%';
                FLUSH PRIVILEGES;
              "
              break
            fi
            echo "Waiting for MySQL to be ready (attempt $i)..."
            sleep 3
          done

      - name: Verify DB connection
        run: |
          mysql -h127.0.0.1 -u${DB_USER} -p${DB_PASSWORD} -e "SHOW DATABASES; USE ${DB_NAME}; SHOW TABLES;"

      - name: Build project to copy resources
        working-directory: ${{ env.PROJECT_DIR }}
        run: ./mvnw clean compile

      - name: Debug environment
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "=== Environment Debug ==="
          java -version
          ./mvnw -v || mvn -v
          ls -la
          ls -la src/main/resources/db/changelog/
          mysql -h127.0.0.1 -u${DB_USER} -p${DB_PASSWORD} -e "SELECT 1" ${DB_NAME}

      - name: Check mvnw availability
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          ls -la
          if [ ! -f ./mvnw ]; then
            echo "‚ùå mvnw not found!"
            exit 1
          fi

      - name: Run Liquibase migrations with rollback on failure
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          cat << 'EOF' > run_liquibase.sh
          #!/bin/bash
          set -e

          echo "=== Running Liquibase Migration ==="
          java -version
          ./mvnw -v

          # Run Liquibase update
          ./mvnw liquibase:update \
            -Dliquibase.changeLogFile=src/main/resources/db/changelog/db.changelog-master.xml \
            -Dliquibase.url="jdbc:mysql://127.0.0.1:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true" \
            -Dliquibase.username="${DB_USER}" \
            -Dliquibase.password="${DB_PASSWORD}" \
            -Dliquibase.driver=com.mysql.cj.jdbc.Driver

          if [ $? -eq 0 ]; then
            echo "::notice::Liquibase migration succeeded"
            exit 0
          else
            echo "::error::Liquibase migration failed"
            echo "Attempting rollback to tag 'tag-person'..."

            ./mvnw liquibase:rollback \
              -Dliquibase.rollbackCount=1 \
              -Dliquibase.url="jdbc:mysql://127.0.0.1:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true" \
              -Dliquibase.username="${DB_USER}" \
              -Dliquibase.password="${DB_PASSWORD}" \
              -Dliquibase.driver=com.mysql.cj.jdbc.Driver

            exit 1
          fi
          EOF

          chmod +x run_liquibase.sh
          ./run_liquibase.sh

      - name: Run tests
        working-directory: ${{ env.PROJECT_DIR }}
        run: ./mvnw clean test -Dspring.profiles.active=pipeline

      - name: Build and package
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          ./mvnw clean install \
            -Dspring-boot.run.profiles=pipeline \
            -Dspring.datasource.url=${SPRING_DATASOURCE_URL} \
            -Dspring.datasource.username=${SPRING_DATASOURCE_USERNAME} \
            -Dspring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

      - name: Verify Liquibase migrations in DB
        run: |
          mysql -h127.0.0.1 -u${DB_USER} -p${DB_PASSWORD} -e "
            USE ${DB_NAME};
            SHOW TABLES;
            SELECT 
              id, 
              author, 
              filename, 
              dateexecuted,
              MD5SUM,
              CASE WHEN EXECTYPE = 'EXECUTED' THEN 'Success' ELSE 'Failed' END AS status
            FROM DATABASECHANGELOG
            ORDER BY dateexecuted DESC;
          "
